---
- name: Ensure automation gateway is ready
  ansible.builtin.uri:
    url: '{{ _gateway_protocol }}://{{ _gateway_hostname }}:{{ _gateway_port }}/api/gateway/v1/ping/'
    validate_certs: true
    ca_path: '{{ _ca_tls_dir }}/extracted/pem/tls-ca-bundle.pem'
  register: _gateway_ready
  until: _gateway_ready.status == 200
  retries: 30
  delay: 10

- name: Register services
  environment:
    SSL_CERT_FILE: '{{ _ca_tls_dir }}/extracted/pem/tls-ca-bundle.pem'
  run_once: true
  module_defaults:
    group/ansible.platform.gateway:
      gateway_hostname: '{{ _gateway_protocol }}://{{ _gateway_hostname }}:{{ _gateway_port }}'
      gateway_username: '{{ gateway_admin_user }}'
      gateway_password: '{{ gateway_admin_password }}'
      gateway_validate_certs: true
  block:
    - name: Update automation platform gateway settings
      ansible.platform.settings:
        settings: '{{ gateway_proxy_vars.gateway_settings }}'

    - name: Update automation platform gateway http ports
      ansible.platform.http_port:
        name: '{{ item.name }}'
        number: '{{ item.number }}'
        use_https: '{{ item.use_https }}'
        is_api_port: '{{ item.is_api_port }}'
      loop: '{{ gateway_proxy_vars.gateway_http_ports }}'

    - name: Update automation platform gateway service clusters
      ansible.platform.service_cluster:
        name: '{{ item.name }}'
        service_type: '{{ item.service_type }}'
      loop: '{{ gateway_proxy_vars.gateway_service_clusters }}'

    - name: Update automation platform gateway service nodes
      ansible.platform.service_node:
        name: '{{ item.name }}'
        address: '{{ item.address }}'
        service_cluster: '{{ item.service_cluster }}'
        tags: '{{ item.tags | default(omit) }}'
      loop: '{{ gateway_proxy_vars.gateway_service_nodes }}'

    - name: Update automation platform gateway services
      ansible.platform.service:
        name: '{{ item.name }}'
        api_slug: '{{ item.api_slug }}'
        http_port: '{{ item.http_port }}'
        service_cluster: '{{ item.service_cluster }}'
        is_service_https: '{{ item.is_service_https }}'
        service_path: '{{ item.service_path }}'
        service_port: '{{ item.service_port }}'
        order: '{{ item.order }}'
        enable_gateway_auth: '{{ item.enable_gateway_auth | default(omit) }}'
      loop: '{{ gateway_proxy_vars.gateway_services }}'

    - name: Gather Service Nodes
      containers.podman.podman_container:
        name: automation-gateway-init
        image: '{{ _gateway_image }}'
        command: 'aap-gateway-manage list_services'
        detach: false
        rm: true
        log_driver: '{{ container_log_driver }}'
        user: '{{ ansible_user_uid }}'
        userns: keep-id
        network: host
        mount:
          - 'type=tmpfs,destination=/var/cache/ansible-automation-platform/gateway,U=true'
        secrets: '{{ _django_secrets }}'
        volume: '{{ _web_volumes }}'
        env: '{{ _common_env }}'
      register: _list_services

    - name: Set current service nodes facts
      ansible.builtin.set_fact:
        _current_service_nodes: "{{ _list_services.stdout_lines | select('match', '^\\s*node:') | map('regex_replace', '^\\s*node:\\s*(.*)', '\\1') | list }}"

    - name: Update automation platform gateway service nodes
      ansible.platform.service_node:
        name: '{{ item }}'
        state: absent
      with_items: '{{ _current_service_nodes }}'
      when:
        - item not in gateway_proxy_vars.gateway_service_nodes | map(attribute='name') | list

    - name: Update automation platform gateway routes
      ansible.platform.route:
        name: '{{ item.name }}'
        description: '{{ item.description }}'
        gateway_path: '{{ item.gateway_path }}'
        service_path: '{{ item.service_path }}'
        http_port: '{{ item.http_port }}'
        is_service_https: '{{ item.is_service_https }}'
        service_cluster: '{{ item.service_cluster }}'
        service_port: '{{ item.service_port }}'
        enable_gateway_auth: '{{ item.enable_gateway_auth }}'
        node_tags: '{{ item.node_tags | default(omit) }}'
      loop: '{{ gateway_proxy_vars.gateway_routes }}'

- name: Manage controller service key
  when: groups.get('automationcontroller', []) | length > 0
  run_once: true
  block:
    - name: Get all controller podman secrets
      containers.podman.podman_secret_info:
      register: _controller_secrets
      delegate_to: '{{ groups["automationcontroller"] | first }}'

    - name: Generate controller service key
      ansible.builtin.include_tasks: service_key.yml
      vars:
        _component: controller
      when: _controller_secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'controller_resource_server') | length == 0

    - name: Set controller service key fact
      ansible.builtin.set_fact:
        __controller_service_key: '{{ _service_key.stdout | trim }}'
      no_log: true
      when: _controller_secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'controller_resource_server') | length == 0

- name: Manage eda service key
  when: groups.get('automationeda', []) | length > 0
  run_once: true
  block:
    - name: Get all eda podman secrets
      containers.podman.podman_secret_info:
      register: _eda_secrets
      delegate_to: '{{ groups["automationeda"] | first }}'

    - name: Generate eda service key
      ansible.builtin.include_tasks: service_key.yml
      vars:
        _component: eda
      when: _eda_secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'eda_resource_server') | length == 0

    - name: Set eda service key fact
      ansible.builtin.set_fact:
        __eda_service_key: '{{ _service_key.stdout | trim }}'
      no_log: true
      when: _eda_secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'eda_resource_server') | length == 0

- name: Manage hub service key
  when: groups.get('automationhub', []) | length > 0
  run_once: true
  block:
    - name: Get all hub podman secrets
      containers.podman.podman_secret_info:
      register: _hub_secrets
      delegate_to: '{{ groups["automationhub"] | first }}'

    - name: Generate hub service key
      ansible.builtin.include_tasks: service_key.yml
      vars:
        _component: galaxy
      when: _hub_secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'hub_resource_server') | length == 0

    - name: Set hub service key fact
      ansible.builtin.set_fact:
        __hub_service_key: '{{ _service_key.stdout | trim }}'
      no_log: true
      when: _hub_secrets.secrets | map(attribute='Spec') | selectattr('Name', 'equalto', 'hub_resource_server') | length == 0
...
